# User-story -> namespaces in Consul
# Aim: show resource isolation of services
# Reference: https://youtu.be/Ff6kLvKkJBE

# 1. Register service in namespace=default
# 2. Create namespaces ["team1", "team2"]
# 3. Generate admin tokens for namespaces ["team1", "team2"]
# 4. Use admin token team1: verify, register

# 1. Register service in namespace=default
- name: Register service 'web' in namespace=default
  shell: ./consul services register -name=web -address=1.1.1.1 -port=80
  environment:
    CONSUL_HTTP_TOKEN: master

# 2. Create namespaces ["team1", "team2"]
- name: Create namespace ["team1", "team2"]
  shell: |
    ./consul namespace create -name=team1 -description="Team1 namespace" -meta="team-id=team1" -format=json \
    && ./consul namespace create -name=team2 -description="Team2 namespace" -meta="team-id=team2" -format=json
  environment:
    CONSUL_HTTP_TOKEN: master

# 3. Generate admin tokens for namespaces ["team1", "team2"]
- name: Create administrator token for team1
  shell: >
    ./consul acl token create \
    -format=json \
    -namespace=team1 \
    -description="Team1 administrator" \
    -policy-name="namespace-management" \
    | jq -r .SecretID
  register: team1_namespace_admin_token
  environment:
    CONSUL_HTTP_TOKEN: master

- name: Create administrator token for team2
  shell: >
    ./consul acl token create \
    -format=json \
    -namespace=team2 \
    -description="Team2 administrator" \
    -policy-name="namespace-management" \
    | jq -r .SecretID
  register: team2_namespace_admin_token
  environment:
    CONSUL_HTTP_TOKEN: master

# 4. Use admin token team1: verify, register

- name: Try to read namespace-management policy namespace team1 with admin token team1 - success
  shell: ./consul acl policy read -namespace=team1 -name=namespace-management
  register: read_policy_try_1
  environment:
    CONSUL_HTTP_TOKEN: "{{ team1_namespace_admin_token.stdout }}"
  until: read_policy_try_1.rc == 0
  retries: 5
  delay: 1

- name: Try to read namespace-management policy namespace team2 with admin token team1 - should fail
  shell: ./consul acl policy read -namespace=team2 -name=namespace-management
  register: read_policy_try_2
  environment:
    CONSUL_HTTP_TOKEN: "{{ team1_namespace_admin_token.stdout }}"
  failed_when: read_policy_try_2.rc == 0

- name: Try to read namespace-management policy namespace team2 without any token - should fail
  shell: ./consul acl policy read -namespace=team2 -name=namespace-management
  register: read_policy_try_3
  failed_when: read_policy_try_3.rc == 0 # fail if success

- name: Try register service 'web' in namespace=default with admin token team1 - should fail
  shell: ./consul services register -namespace=default -name=web -address=1.1.1.1 -port=80
  register: register_service_try_1
  environment:
    CONSUL_HTTP_TOKEN: "{{ team1_namespace_admin_token.stdout }}"
  failed_when: register_service_try_1.rc == 0 # fail if success

- name: Try register service 'web' in namespace=team2 with admin token team1 - should fail
  shell: ./consul services register -namespace=team2 -name=web -address=1.1.1.1 -port=80
  register: register_service_try_2
  environment:
    CONSUL_HTTP_TOKEN: "{{ team1_namespace_admin_token.stdout }}"
  failed_when: register_service_try_1.rc == 0 # fail if success

# Does not fail
- name: Try list catalog namespace=team2 with admin token of team1 - should fail
  shell: ./consul catalog services -namespace=team2
  register: list_catalog_try_1
  environment:
    CONSUL_HTTP_TOKEN: "{{ team1_namespace_admin_token.stdout }}"
  failed_when: list_catalog_try_1.rc == 0 # fail if success

# Does not fail
- name: Try list catalog namespace=team2 without token - should fail
  shell: ./consul catalog services -namespace=team2
  register: list_catalog_try_2
  failed_when: list_catalog_try_2.rc == 0 # fail if success
