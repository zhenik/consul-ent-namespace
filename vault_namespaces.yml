# User-story -> namespaces in Consul
# Aim: show resource isolation of services
# Reference: https://youtu.be/Ff6kLvKkJBE

---
- hosts: localhost
  tasks:
# 1. Namespaces
    - name: Create namepspace 'education'
      shell: ./vault namespace create education
      register: namespace_created_1
      environment:
        VAULT_TOKEN: "master"
        VAULT_ADDR: "http://127.0.0.1:8200"

    - name: Create child namespace 'training'
      shell: ./vault namespace create -namespace=education training
      environment:
        VAULT_TOKEN: "master"
        VAULT_ADDR: "http://127.0.0.1:8200"

    - name: Create child namespace 'certification'
      shell: ./vault namespace create -namespace=education certification
      environment:
        VAULT_TOKEN: "master"
        VAULT_ADDR: "http://127.0.0.1:8200"

    - name: List the existing namespaces on the root
      shell: ./vault namespace list
      register: namespace_list_root
      environment:
        VAULT_TOKEN: "master"
        VAULT_ADDR: "http://127.0.0.1:8200"

    - name: List child namespaces under 'education'
      shell: ./vault namespace list -namespace=education
      register: namespace_list_childs
      environment:
        VAULT_TOKEN: "master"
        VAULT_ADDR: "http://127.0.0.1:8200"

# 2. Policies

    - name: Create 'edu-admin' policy under 'education' namespace
      shell: ./vault policy write -namespace=education edu-admin policy/vault/edu-admin.hcl
      environment:
        VAULT_TOKEN: "master"
        VAULT_ADDR: "http://127.0.0.1:8200"

    - name: Create 'training-admin' policy under 'education/training' namespace
      shell: ./vault policy write -namespace=education/training training-admin policy/vault/training-admin.hcl
      environment:
        VAULT_TOKEN: "master"
        VAULT_ADDR: "http://127.0.0.1:8200"

# 3. Setup entities and groups

    - name: Enable the userpass auth method
      shell: ./vault auth enable -namespace=education userpass
      environment:
        VAULT_TOKEN: "master"
        VAULT_ADDR: "http://127.0.0.1:8200"

    - name: Create a user bob
      shell: ./vault write -namespace=education auth/userpass/users/bob password="training"
      environment:
        VAULT_TOKEN: "master"
        VAULT_ADDR: "http://127.0.0.1:8200"

    - name: Create an entity for Bob Smith with edu-admin policy attached. Save the generated entity ID in a file named entity_id.txt
      shell: ./vault write -namespace=education -format=json identity/entity name="Bob Smith" policies="edu-admin" | jq -r ".data.id"
      register: bob_entity_id
      environment:
        VAULT_TOKEN: "master"
        VAULT_ADDR: "http://127.0.0.1:8200"

    - name: Debug bob_entity_id
      debug:
        msg: "bob_entity_id: {{ bob_entity_id }}"

    - name: Get the mount accessor for userpass auth method
      shell: ./vault auth list -namespace=education -format=json | jq -r '.["userpass/"].accessor'
      register: mount_accessor_userpass
      environment:
        VAULT_TOKEN: "master"
        VAULT_ADDR: "http://127.0.0.1:8200"

    - name: Debug
      debug:
        msg: "mount_accessor_userpass: {{ mount_accessor_userpass }}"

    - name: Create an entity alias for Bob Smith to attach bob
      shell: |
        ./vault write -namespace=education identity/entity-alias name="bob" \
          canonical_id={{ bob_entity_id.stdout }} mount_accessor={{ mount_accessor_userpass.stdout }}
      environment:
        VAULT_TOKEN: "master"
        VAULT_ADDR: "http://127.0.0.1:8200"

    - name: Create a group, "Training Admin" in education/training namespace with Bob Smith entity as its member
      shell: |
        ./vault write -namespace=education/training identity/group \
          name="Training Admin" policies="training-admin" \
          member_entity_ids={{ bob_entity_id.stdout }}
      environment:
        VAULT_TOKEN: "master"
        VAULT_ADDR: "http://127.0.0.1:8200"

# 4. Test the Bob Smith entity

    - name: Login as bob in namespace 'education' and get client token
      shell: ./vault login -method=userpass username=bob password=training -format=json | jq -r ".auth.client_token"
      register: bob_education_token
      environment:
        VAULT_NAMESPACE: "education"
        VAULT_ADDR: "http://127.0.0.1:8200"

    - name: Debug bob_education_token
      debug:
        msg: "bob_education_token {{ bob_education_token.stdout }}"

    - name: Verify that you can create a new namespace called web-app
      shell: ./vault namespace create web-app
      register: try_register_namespace_1
      environment:
        VAULT_NAMESPACE: "education"
        VAULT_ADDR: "http://127.0.0.1:8200"
        VAULT_TOKEN: "{{ bob_education_token.stdout }}"
      failed_when: try_register_namespace_1.rc > 0

    - name: Debug try_register_namespace_1
      debug:
        msg: "try_register_namespace_1 {{ try_register_namespace_1 }}"

    - name: Verify that you can enable key/value v2 secrets engine at edu-secret
      shell: ./vault secrets enable -path=edu-secret kv-v2
      register: try_enable_kv2_1
      environment:
        VAULT_NAMESPACE: "education"
        VAULT_ADDR: "http://127.0.0.1:8200"
        VAULT_TOKEN: "{{ bob_education_token.stdout }}"
      failed_when: try_enable_kv2_1.rc > 0
